
application {

  env = dev

  version = "1.0"

  name = "proteus"

  path = "/v1"

  host = "localhost"

  ports {
    http = 0
    # https = 8443
  }

  charset = UTF-8

  fallbackHandler = "io.sinistral.proteus.server.handlers.ServerFallbackHandler"

  defaultResponseListener = "io.sinistral.proteus.server.handlers.ServerDefaultResponseListener"

  jacksonModule = "io.sinistral.proteus.openapi.test.modules.JacksonModule"

  tmpdir = ${java.io.tmpdir}/${application.name}

  # path to default favicon file
  favicon = "/io/sinistral/proteus/favicon.ico"

}

api.version = "v1"

openapi.converterClasses = ["io.sinistral.proteus.openapi.test.converters.MoneyModelConverter"]

jackson {
  jsonView = {
    # a class that provides a mapping from the JsonView query parameter values to JsonView classes
    className = null
    # the name of the query parameter to use for JsonView class lookup
    queryParameterName = "context"
  }

}

openapi {

  basePath = ${application.path}"/openapi"

  redocPath = "redoc"

  port = ${application.ports.http}

  specFilename = "openapi"

  openapi = "3.0.1"

  # openapi info
  info {
    title = ${application.name}
    version = ${application.version}
    description = "Proteus Server"
  }

  securitySchemes {
    ApiKeyAuth = {
      type = "apiKey"
      in = "header"
      name = "X-API-KEY"
    }
    bearerHttpAuthentication = {
      type = "http"
      scheme = "bearer"
      bearerFormat = "JWT"
    }
  }

  servers = [
    {
      url = ${application.path}
      description = "Default Server"
    }
  ]

  converterClasses = [

  ]
}

globalHeaders
  {
    #  Access-Control-Allow-Origin: "*"
    #  Access-Control-Allow-Methods: "*"
    #  Access-Control-Allow-Headers: "*"
    Server = ${application.name}
  }

assets {
  # the base path assets will be server from
  path = "/public"
  # the directory to load the assets from
  dir = "./assets"
  cache {
    # cache timeout for the assets
    time = 500
  }
}

undertow
  {
    server {
      enableHttp2 = false
      alwaysSetDate = true
      alwaysSetKeepAlive = false
      recordRequestStartTime = false
      maxEntitySize = 100M
      bufferPipelinedData = false
    }

    socket {
      backlog = 10000
    }


    ssl {
      enabled = false
      keystorePath = "development.jks"
      truststorePath = "development.ts"
      keystorePassword = "password"
      truststorePassword = "password"
    }

    enableHttp2 = false
    # x AvailableProcessors
    ioThreadsMultiplier = 2
    workerThreadsMultiplier = 8
    bufferSize = 16K
    directBuffers = true
  }
 
 